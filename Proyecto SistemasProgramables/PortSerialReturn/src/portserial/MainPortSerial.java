/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package portserial;

import gnu.io.CommPortIdentifier;
import gnu.io.PortInUseException;
import gnu.io.SerialPort;
import gnu.io.UnsupportedCommOperationException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.ChartPanel;

import java.awt.Color;
import java.awt.BasicStroke;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.Timer;
import org.jfree.data.xy.XYDataset;

/**
 *
 * @author isaac
 */
public class MainPortSerial extends javax.swing.JFrame {

    Enumeration portsFree = null;
    CommPortIdentifier port = null;
    SerialPort serialPort = null;
    OutputStream output = null;
    InputStream input = null;
    GraphicLineal graphicLineal = new GraphicLineal();
    GraphicPolar graphicPolar = null;
    Thread threadRun;
    ConnectionBdd connection = new ConnectionBdd();
    int v, v1, v2, v3 = 0;
    float volts[] = new float[50];
    float voltsB[] = new float[50];
    float voltsC[] = new float[50];
    float voltsD[] = new float[50];
    float timeVec[] = new float[50];
    Timer timer;
    int i = 0;

    /**
     * Creates new form MainPortSerial
     */
    public MainPortSerial() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        btnConnectPort = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnRadioPolar = new javax.swing.JRadioButton();
        btnRadioLineal = new javax.swing.JRadioButton();
        panelPolar = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btnChannelOne = new javax.swing.JRadioButton();
        btnChannelTwo = new javax.swing.JRadioButton();
        btnChannelThree = new javax.swing.JRadioButton();
        btnChannelFour = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        btnOffChannelOne = new javax.swing.JRadioButton();
        btnOffChannelTwo = new javax.swing.JRadioButton();
        btnOffChannelThree = new javax.swing.JRadioButton();
        btnOffChannelFour = new javax.swing.JRadioButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnGraphicHistory = new javax.swing.JButton();
        btnHistoryPolar = new javax.swing.JRadioButton();
        btnHistoryLineal = new javax.swing.JRadioButton();
        fechaIni = new javax.swing.JTextField();
        fechaFin = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnConnectPort.setText("Connect Port");
        btnConnectPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectPortActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel1.setText("Main Port Serial and Channels");

        buttonGroup1.add(btnRadioPolar);
        btnRadioPolar.setText("Polar Graphic");
        btnRadioPolar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRadioPolarActionPerformed(evt);
            }
        });

        buttonGroup1.add(btnRadioLineal);
        btnRadioLineal.setText("Lineal Graphic");
        btnRadioLineal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRadioLinealActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelPolarLayout = new javax.swing.GroupLayout(panelPolar);
        panelPolar.setLayout(panelPolarLayout);
        panelPolarLayout.setHorizontalGroup(
            panelPolarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 883, Short.MAX_VALUE)
        );
        panelPolarLayout.setVerticalGroup(
            panelPolarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 563, Short.MAX_VALUE)
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel2.setText("Choose a Channel");

        btnChannelOne.setText("channel one");
        btnChannelOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChannelOneActionPerformed(evt);
            }
        });

        btnChannelTwo.setText("Channel Two");
        btnChannelTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChannelTwoActionPerformed(evt);
            }
        });

        btnChannelThree.setText("Channel Three");
        btnChannelThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChannelThreeActionPerformed(evt);
            }
        });

        btnChannelFour.setText("Channel Four");
        btnChannelFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChannelFourActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel3.setText("Choose a graphic");

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel4.setText("Off/ON Channel");

        btnOffChannelOne.setText("channel One");
        btnOffChannelOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOffChannelOneActionPerformed(evt);
            }
        });

        btnOffChannelTwo.setText("channel Two");
        btnOffChannelTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOffChannelTwoActionPerformed(evt);
            }
        });

        btnOffChannelThree.setText("channel Three");
        btnOffChannelThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOffChannelThreeActionPerformed(evt);
            }
        });

        btnOffChannelFour.setText("channel Four");
        btnOffChannelFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOffChannelFourActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel5.setText("Graph History");

        jLabel6.setText("Fecha inicio");

        jLabel7.setText("Fecha fin");

        btnGraphicHistory.setText("Graficar Historial");
        btnGraphicHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraphicHistoryActionPerformed(evt);
            }
        });

        btnHistoryPolar.setText("Polar Graphic");
        btnHistoryPolar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHistoryPolarActionPerformed(evt);
            }
        });

        btnHistoryLineal.setText("Lineal Graphic");

        fechaFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaFinActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(btnConnectPort, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(76, 76, 76))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(21, 21, 21)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(btnChannelOne)
                                        .addComponent(btnChannelTwo)
                                        .addComponent(btnChannelThree)
                                        .addComponent(btnChannelFour)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSeparator1)
                                        .addComponent(btnGraphicHistory)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnRadioPolar)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btnRadioLineal))
                                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btnOffChannelThree)
                                            .addGap(5, 5, 5)
                                            .addComponent(btnOffChannelFour))
                                        .addComponent(jSeparator3)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(27, 27, 27)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnOffChannelOne)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnOffChannelTwo))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnHistoryLineal)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnHistoryPolar))
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(fechaFin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                                        .addComponent(fechaIni, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)))
                        .addComponent(panelPolar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(195, 195, 195))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(374, 374, 374))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConnectPort, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChannelOne)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChannelTwo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChannelThree)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnChannelFour)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRadioPolar)
                            .addComponent(btnRadioLineal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOffChannelOne)
                            .addComponent(btnOffChannelTwo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnOffChannelThree)
                            .addComponent(btnOffChannelFour))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fechaIni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHistoryLineal)
                            .addComponent(btnHistoryPolar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGraphicHistory))
                    .addComponent(panelPolar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectPortActionPerformed
        threadRun = new Thread(new RunnableThread());

        portsFree = CommPortIdentifier.getPortIdentifiers();
        while (portsFree.hasMoreElements()) {
            port = (CommPortIdentifier) portsFree.nextElement();
            System.out.println("port " + port.getName());
            if (port.getName().equals("COM6")) {
                try {
                    serialPort = (SerialPort) port.open("port Serial", 2000);

                    int baudRate = 9600;
                    serialPort.setSerialPortParams(baudRate, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);
                    serialPort.setDTR(true);

                    output = serialPort.getOutputStream();

                    input = serialPort.getInputStream();
                    JOptionPane.showMessageDialog(null, "Serial Port Connected");
                    threadRun.start();
                    timer = new Timer(10, new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent ae) {
                            if (btnRadioLineal.isSelected()) {
                                btnRadioLineal.doClick();
                            }
                            if (btnRadioPolar.isSelected()) {
                                btnRadioPolar.doClick();
                            }
                        }

                    });
                    timer.start();
                } catch (PortInUseException ex) {
                    JOptionPane.showMessageDialog(null, "Error 1 " + ex.getMessage());

                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Error 3" + ex.getMessage());
                } catch (UnsupportedCommOperationException ex) {
                    JOptionPane.showMessageDialog(null, "Error 3" + ex.getMessage());
                }

            }

        }
    }//GEN-LAST:event_btnConnectPortActionPerformed

    private void btnRadioPolarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRadioPolarActionPerformed
        // TODO add your handling code here:
        // btnRadioPolar.isSelected();

        try {
            graphicPolar = new GraphicPolar();
            ConnectionBdd connect = new ConnectionBdd();
            Connection con = connect.conectar();
            String sql1 = "SELECT volts from channelOne order by id DESC limit 20";
            String sql2 = "SELECT volts from channelTwo order by id DESC limit 20";
            String sql3 = "SELECT volts from channelThree order by id DESC limit 20";
            String sql4 = "SELECT volts from channelFour order by id DESC limit 20";
            Double[] vec1 = new Double[20];
            Double[] vec2 = new Double[20];
            Double[] vec3 = new Double[20];
            Double[] vec4 = new Double[20];
            int i = 0;
            if (btnChannelOne.isSelected() && i <= 20) {
                Statement st = (Statement) con.createStatement();
                ResultSet rs = st.executeQuery(sql1);
                while (rs.next()) {
                    vec1[i] = Double.parseDouble(rs.getString("volts"));
                    i++;
                }
            }
            if (btnChannelTwo.isSelected()) {
                Statement st1 = (Statement) con.createStatement();
                ResultSet rs1 = st1.executeQuery(sql2);
                i = 0;
                while (rs1.next() && i <= 20) {
                    vec2[i] = Double.parseDouble(rs1.getString("volts"));
                    i++;
                }
            }
            if (btnChannelThree.isSelected()) {
                Statement st2 = (Statement) con.createStatement();
                ResultSet rs2 = st2.executeQuery(sql3);
                i = 0;
                while (rs2.next() && i <= 20) {
                    vec3[i] = Double.parseDouble(rs2.getString("volts"));
                    i++;
                }
            }
            if (btnChannelFour.isSelected()) {
                Statement st3 = (Statement) con.createStatement();
                ResultSet rs3 = st3.executeQuery(sql4);
                i = 0;
                while (rs3.next() && i <= 20) {
                    vec4[i] = Double.parseDouble(rs3.getString("volts"));
                    i++;
                }
            }
            con.close();
            if (btnChannelOne.isSelected() || btnChannelTwo.isSelected() || btnChannelThree.isSelected() || btnChannelFour.isSelected()) {
                graphicPolar.addValuesPolar(vec1, vec2, vec3, vec4, i);
            }
            ChartPanel panel = null;
            panel = graphicPolar.getPanelPolar();
            panelPolar.removeAll();
            panelPolar.add(panel);
            panel.setBounds(0, 0, 800, 500);

        } catch (SQLException ex) {
            Logger.getLogger(MainPortSerial.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*
        if (btnChannelOne.isSelected()) {
            graphicPolar = new GraphicPolar();
            graphicPolar.addValuesPolar(volts, voltsB, voltsC, voltsD, i);
            ChartPanel panel = graphicPolar.getPanelPolar();
            panelPolar.removeAll();
            panelPolar.add(panel);
            panel.setBounds(0, 0, 800, 500);
        }
        if (btnChannelTwo.isSelected()) {
            graphicPolar = new GraphicPolar();
            graphicPolar.addValuesPolar(volts, voltsB, voltsC, voltsD, i);
            ChartPanel panel = graphicPolar.getPanelPolar();
            panelPolar.removeAll();
            panelPolar.add(panel);
            panel.setBounds(0, 0, 800, 500);
        }
        if (btnChannelThree.isSelected()) {
            graphicPolar = new GraphicPolar();
            graphicPolar.addValuesPolar(volts, voltsB, voltsC, voltsD, i);
            ChartPanel panel = graphicPolar.getPanelPolar();
            panelPolar.removeAll();
            panelPolar.add(panel);
            panel.setBounds(0, 0, 800, 500);
        }
        if (btnChannelFour.isSelected()) {
            graphicPolar = new GraphicPolar();
            graphicPolar.addValuesPolar(volts, voltsB, voltsC, voltsD, i);
            ChartPanel panel = graphicPolar.getPanelPolar();
            panelPolar.removeAll();
            panelPolar.add(panel);
            panel.setBounds(0, 0, 800, 500);
        }*/

    }//GEN-LAST:event_btnRadioPolarActionPerformed

    private void btnRadioLinealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRadioLinealActionPerformed
        // TODO add your handling code here:

        try {
            ConnectionBdd connect = new ConnectionBdd();
            Connection con = connect.conectar();
            String sql1 = "SELECT volts from channelOne order by id DESC limit 20";
            String sql2 = "SELECT volts from channelTwo order by id DESC limit 20";
            String sql3 = "SELECT volts from channelThree order by id DESC limit 20";
            String sql4 = "SELECT volts from channelFour order by id DESC limit 20";
            Double[] vec1 = new Double[20];
            Double[] vec2 = new Double[20];
            Double[] vec3 = new Double[20];
            Double[] vec4 = new Double[20];
            int i = 0;
            if (btnChannelOne.isSelected() && i <= 20) {
                Statement st = (Statement) con.createStatement();
                ResultSet rs = st.executeQuery(sql1);
                while (rs.next()) {
                    vec1[i] = Double.parseDouble(rs.getString("volts"));
                    i++;
                }
            }
            if (btnChannelTwo.isSelected()) {
                Statement st1 = (Statement) con.createStatement();
                ResultSet rs1 = st1.executeQuery(sql2);
                i = 0;
                while (rs1.next() && i <= 20) {
                    vec2[i] = Double.parseDouble(rs1.getString("volts"));
                    i++;
                }
            }
            if (btnChannelThree.isSelected()) {
                Statement st2 = (Statement) con.createStatement();
                ResultSet rs2 = st2.executeQuery(sql3);
                i = 0;
                while (rs2.next() && i <= 20) {
                    vec3[i] = Double.parseDouble(rs2.getString("volts"));
                    i++;
                }
            }
            if (btnChannelFour.isSelected()) {
                Statement st3 = (Statement) con.createStatement();
                ResultSet rs3 = st3.executeQuery(sql4);
                i = 0;
                while (rs3.next() && i <= 20) {
                    vec4[i] = Double.parseDouble(rs3.getString("volts"));
                    i++;
                }
            }
            con.close();
            if (btnChannelOne.isSelected() || btnChannelTwo.isSelected() || btnChannelThree.isSelected() || btnChannelFour.isSelected()) {
                graphicLineal.addValues(vec1, vec2, vec3, vec4, i, timeVec);
            }
            ChartPanel panel = null;
            panel = graphicLineal.getPanel();
            panelPolar.removeAll();
            panelPolar.add(panel);
            panel.setBounds(0, 0, 800, 500);

        } catch (SQLException ex) {
            Logger.getLogger(MainPortSerial.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnRadioLinealActionPerformed

    private void btnChannelOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChannelOneActionPerformed
        // TODO add your handling code here:
        /*
        if (btnChannelOne.isSelected()) {
            graphicPolar.habilitarChannel("channelOne", true);
        }*/
    }//GEN-LAST:event_btnChannelOneActionPerformed

    private void btnChannelTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChannelTwoActionPerformed
        // TODO add your handling code here:
        /*if (btnChannelTwo.isSelected()) {
            graphicPolar.habilitarChannel("channelTwo", true);
        }*/
    }//GEN-LAST:event_btnChannelTwoActionPerformed

    private void btnChannelThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChannelThreeActionPerformed
        // TODO add your handling code here:
        /*if (btnChannelThree.isSelected()) {
            graphicPolar.habilitarChannel("channelTree", true);
        }*/
    }//GEN-LAST:event_btnChannelThreeActionPerformed

    private void btnChannelFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChannelFourActionPerformed
        // TODO add your handling code here:
        /*if (btnChannelFour.isSelected()) {
            graphicPolar.habilitarChannel("channelFour", true);
        }*/
    }//GEN-LAST:event_btnChannelFourActionPerformed
    /*Apagar Canales*/
    private void btnOffChannelTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOffChannelTwoActionPerformed
        // TODO add your handling code here:
        if (btnOffChannelTwo.isSelected()) {
            try {
               String data = "2";
                output.write(data.getBytes());
                JOptionPane.showMessageDialog(null, "Channel Off/ON");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnOffChannelTwoActionPerformed

    private void btnOffChannelOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOffChannelOneActionPerformed
        // TODO add your handling code here:
        if (btnOffChannelOne.isSelected()) {
            try {
                String data = "1";
                output.write(data.getBytes());
                JOptionPane.showMessageDialog(null, "Channel Off/ON");
                //btnOffChannelOne
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnOffChannelOneActionPerformed

    private void btnOffChannelThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOffChannelThreeActionPerformed
        // TODO add your handling code here:
        if (btnOffChannelThree.isSelected()) {
            try {
               String data = "3";
                output.write(data.getBytes());
                JOptionPane.showMessageDialog(null, "Channel Off/ON");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnOffChannelThreeActionPerformed

    private void btnOffChannelFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOffChannelFourActionPerformed
        // TODO add your handling code here:
        if (btnOffChannelFour.isSelected()) {
            try {
                String data = "4";
                output.write(data.getBytes());
                JOptionPane.showMessageDialog(null, "Channel Off/ON");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnOffChannelFourActionPerformed

    private void btnGraphicHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraphicHistoryActionPerformed
        // TODO add your handling code here:
        if (btnHistoryLineal.isSelected() || btnHistoryPolar.isSelected()) {
            if (fechaIni.getText() != null || fechaFin.getText() != null) {
                if (btnHistoryLineal.isSelected()) {
                    try {
                        ConnectionBdd connect = new ConnectionBdd();
                        Connection con = connect.conectar();
                        String sql1 = "SELECT volts from channelOne where fecha_reg between '"+fechaIni+"' and now() order by id DESC limit 100";
                        String sql2 = "SELECT volts from channelTwo where fecha_reg between '"+fechaIni+"' and now()  order by id DESC limit 100";
                        String sql3 = "SELECT volts from channelThree where fecha_reg between '"+fechaIni+"' and now()  order by id DESC limit 100";
                        String sql4 = "SELECT volts from channelFour where fecha_reg between '"+fechaIni+"' and now()  order by id DESC limit 100";
                        Double[] vec1 = new Double[100];
                        Double[] vec2 = new Double[100];
                        Double[] vec3 = new Double[100];
                        Double[] vec4 = new Double[100];
                        int i = 0;
                        if (btnChannelOne.isSelected()) {
                            Statement st = (Statement) con.createStatement();
                            ResultSet rs = st.executeQuery(sql1);
                            while (rs.next()) {
                                vec1[i] = Double.parseDouble(rs.getString("volts"));
                                i++;
                            }
                        }
                        if (btnChannelTwo.isSelected()) {
                            Statement st1 = (Statement) con.createStatement();
                            ResultSet rs1 = st1.executeQuery(sql2);
                            i = 0;
                            while (rs1.next()) {
                                vec2[i] = Double.parseDouble(rs1.getString("volts"));
                                i++;
                            }
                        }
                        if (btnChannelThree.isSelected()) {
                            Statement st2 = (Statement) con.createStatement();
                            ResultSet rs2 = st2.executeQuery(sql3);
                            i = 0;
                            while (rs2.next()) {
                                vec3[i] = Double.parseDouble(rs2.getString("volts"));
                                i++;
                            }
                        }
                        if (btnChannelFour.isSelected()) {
                            Statement st3 = (Statement) con.createStatement();
                            ResultSet rs3 = st3.executeQuery(sql4);
                            i = 0;
                            while (rs3.next()) {
                                vec4[i] = Double.parseDouble(rs3.getString("volts"));
                                i++;
                            }
                        }
                        con.close();
                        if (btnChannelOne.isSelected() || btnChannelTwo.isSelected() || btnChannelThree.isSelected() || btnChannelFour.isSelected()) {
                            graphicLineal.addValues(vec1, vec2, vec3, vec4, i, timeVec);
                        }
                        ChartPanel panel = null;
                        panel = graphicLineal.getPanel();
                        JFrame ventana = new JFrame("El grafico");
                        ventana.getContentPane().add(panel);
                        ventana.pack();
                        ventana.setVisible(true);
                        ventana.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

                    } catch (SQLException ex) {
                        Logger.getLogger(MainPortSerial.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (btnHistoryPolar.isSelected()) {
                    try {
                        graphicPolar = new GraphicPolar();
                        ConnectionBdd connect = new ConnectionBdd();
                        Connection con = connect.conectar();
                        String sql1 = "SELECT volts from channelOne where fecha_reg between '"+fechaIni+"' and now() order by id DESC limit 50";
                        String sql2 = "SELECT volts from channelTwo where fecha_reg between '"+fechaIni+"' and now()  order by id DESC limit 50";
                        String sql3 = "SELECT volts from channelThree where fecha_reg between '"+fechaIni+"' and now()  order by id DESC limit 50";
                        String sql4 = "SELECT volts from channelFour where fecha_reg between '"+fechaIni+"' and now()  order by id DESC limit 50";
                        Double[] vec1 = new Double[50];
                        Double[] vec2 = new Double[50];
                        Double[] vec3 = new Double[50];
                        Double[] vec4 = new Double[50];
                        int i = 0;
                        if (btnChannelOne.isSelected()) {
                            Statement st = (Statement) con.createStatement();
                            ResultSet rs = st.executeQuery(sql1);
                            while (rs.next()) {
                                vec1[i] = Double.parseDouble(rs.getString("volts"));
                                i++;
                            }
                        }
                        if (btnChannelTwo.isSelected()) {
                            Statement st1 = (Statement) con.createStatement();
                            ResultSet rs1 = st1.executeQuery(sql2);
                            i = 0;
                            while (rs1.next() && i <= 20) {
                                vec2[i] = Double.parseDouble(rs1.getString("volts"));
                                i++;
                            }
                        }
                        if (btnChannelThree.isSelected()) {
                            Statement st2 = (Statement) con.createStatement();
                            ResultSet rs2 = st2.executeQuery(sql3);
                            i = 0;
                            while (rs2.next() && i <= 20) {
                                vec3[i] = Double.parseDouble(rs2.getString("volts"));
                                i++;
                            }
                        }
                        if (btnChannelFour.isSelected()) {
                            Statement st3 = (Statement) con.createStatement();
                            ResultSet rs3 = st3.executeQuery(sql4);
                            i = 0;
                            while (rs3.next() && i <= 20) {
                                vec4[i] = Double.parseDouble(rs3.getString("volts"));
                                i++;
                            }
                        }
                        con.close();
                        if (btnChannelOne.isSelected() || btnChannelTwo.isSelected() || btnChannelThree.isSelected() || btnChannelFour.isSelected()) {
                            graphicPolar.addValuesPolar(vec1, vec2, vec3, vec4, i);
                        }
                        ChartPanel panel = null;
                        panel = graphicPolar.getPanelPolar();
                        JFrame ventana1 = new JFrame("El grafico");
                        ventana1.getContentPane().add(panel);
                        ventana1.pack();
                        ventana1.setVisible(true);
                        ventana1.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

                    } catch (SQLException ex) {
                        Logger.getLogger(MainPortSerial.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Digit a date");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Select a Graphic Type");
        }
    }//GEN-LAST:event_btnGraphicHistoryActionPerformed

    private void btnHistoryPolarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHistoryPolarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnHistoryPolarActionPerformed

    private void fechaFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fechaFinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaFinActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPortSerial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPortSerial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPortSerial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPortSerial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPortSerial().setVisible(true);
            }
        });
    }

    public void generateGraphicLineal() {
        Double[] volts = {3.0, 2.0, 3.0};
        Double[] time = {4.0, 4.0, 3.0};
        //graphicLineal.addValuesChannels("channelOne", volts, time);
        graphicLineal.render();
        ChartPanel panel = graphicLineal.getPanel();
        panelPolar.add(panel);
        panel.setBounds(0, 0, 800, 500);
    }

    public void generateGraphicPolar() {
        /*
        Double[] volts = {3.0, 2.0, 3.0};
        Double[] time = {4.0, 4.0, 3.0};
        graphicPolar.addValuesChannelsPolar("channelOne", volts, time);
        graphicPolar.renderPolar();
        Double[] volts1 = {2.0, 4.0, 5.0};
        Double[] time1 = {1.0, 4.0, 3.0};
        graphicPolar.addValuesChannelsPolar("channelTwo", volts1, time1);
        graphicPolar.renderPolar();*/

        ChartPanel panel = graphicPolar.getPanelPolar();
        panelPolar.add(panel);
        panel.setBounds(0, 0, 800, 500);
    }

    private class RunnableThread implements Runnable {

        //Thread thread = new Thread(this, "hilo sub");
        int valuePic = 0;
        boolean isChannel = false;
        int channel = 0;
        int totalValues = 0;
        int numberComplet = 1;
        String valueChannel = "";
        int time = 0;

        int count = 0;

        public RunnableThread() {
            //thread.start();
        }

        @Override
        public void run() {
            while (true) {
                time++;
                i++;
                try {
                    valuePic = input.read();
                    valuePic = valuePic - 48;
                    if (valuePic >= 0) {
                        if (!isChannel) {
                            //System.out.println("entro a verificar canal value "+valuePic);

                            //know that channel is the input of the pic
                            switch (String.valueOf(valuePic)) {
                                case "17":
                                    channel = 1;
                                    isChannel = true;
                                    break;
                                case "18":
                                    channel = 2;
                                    isChannel = true;
                                    break;
                                case "19":
                                    channel = 3;
                                    isChannel = true;
                                    break;
                                case "20":
                                    channel = 4;
                                    isChannel = true;
                                    break;
                            }
                        } else {
                            if (isChannel) {
                                //System.out.println("entro a canl");
                                //System.out.println("valor en el canal "+valuePic);
                                boolean isDigit = isDigit(String.valueOf(valuePic));
                                //System.out.println("is digit "+isDigit);
                                if (isDigit) {
                                    //System.out.println("entro a digito");
                                    numberComplet++;
                                    valueChannel += "" + String.valueOf(valuePic);
                                    if (numberComplet == 3) {
                                        //System.out.println("entro a numero completo ");
                                        if (!valueChannel.isEmpty()) {
                                            //System.out.println("no esta vacia");
                                            //System.out.println("value channel " + valueChannel);

                                            int valueHexa = Integer.parseInt(valueChannel);
                                            float valueVolts = HexadecimalToVolts(valueHexa);
                                            switch (channel) {
                                                case 1:
                                                    ConnectionBdd connect = new ConnectionBdd();
                                                    Connection con = connect.conectar();
                                                    String sql = "insert into channelOne values(null,'" + valueVolts + "',now())";
                                                     {
                                                        try {
                                                            PreparedStatement pre1 = con.prepareStatement(sql);
                                                            pre1.executeUpdate();
                                                            pre1.close();
                                                            con.close();
                                                        } catch (SQLException ex) {
                                                            Logger.getLogger(MainPortSerial.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    }

                                                    /*
                                                    if (v < 50) {
                                                        volts[v] = valueVolts;
                                                        timeVec[v] = i;
                                                        v++;
                                                    } else {
                                                        v = 0;
                                                    }*/
                                                    System.out.println("channel " + valueVolts);
                                                    break;
                                                case 2:
                                                    ConnectionBdd connect1 = new ConnectionBdd();
                                                    Connection con1 = connect1.conectar();
                                                    String sql1 = "insert into channelTwo values(null,'" + valueVolts + "',now())";

                                                    try {
                                                        PreparedStatement pre2 = con1.prepareStatement(sql1);
                                                        pre2.executeUpdate();
                                                        pre2.close();
                                                        con1.close();
                                                    } catch (SQLException ex) {
                                                        Logger.getLogger(MainPortSerial.class.getName()).log(Level.SEVERE, null, ex);
                                                    }
                                                    /*
                                                    if (v1 < 50) {
                                                        voltsB[v1] = valueVolts;
                                                        v1++;
                                                    } else {
                                                        v1 = 0;
                                                    }*/
                                                    System.out.println("channe " + valueVolts);
                                                    break;
                                                case 3:
                                                    ConnectionBdd connect2 = new ConnectionBdd();
                                                    Connection con2 = connect2.conectar();
                                                    String sql2 = "insert into channelThree values(null,'" + valueVolts + "',now())";

                                                    try {
                                                        PreparedStatement pre3 = con2.prepareStatement(sql2);
                                                        pre3.executeUpdate();
                                                        pre3.close();
                                                        con2.close();
                                                    } catch (SQLException ex) {
                                                        Logger.getLogger(MainPortSerial.class.getName()).log(Level.SEVERE, null, ex);
                                                    }
                                                    /*
                                                    if (v2 < 50) {
                                                        voltsC[v2] = valueVolts;
                                                        v2++;
                                                    } else {
                                                        v2 = 0;
                                                    }*/
                                                    System.out.println("channe " + valueVolts);
                                                    break;
                                                case 4:
                                                    ConnectionBdd connect3 = new ConnectionBdd();
                                                    Connection con3 = connect3.conectar();
                                                    String sql3 = "insert into channelFour values(null,'" + valueVolts + "',now())";

                                                    try {
                                                        PreparedStatement pre4 = con3.prepareStatement(sql3);
                                                        pre4.executeUpdate();
                                                        pre4.close();
                                                        con3.close();
                                                    } catch (SQLException ex) {
                                                        Logger.getLogger(MainPortSerial.class.getName()).log(Level.SEVERE, null, ex);
                                                    }
                                                    /*
                                                    if (v3 < 50) {
                                                        voltsD[v3] = valueVolts;
                                                        v3++;
                                                    } else {
                                                        v3 = 0;
                                                     */
                                                    System.out.println("channe " + valueVolts);
                                                    break;
                                            }
                                        }
                                        isChannel = false;
                                        numberComplet = 0;
                                        valueChannel = "";
                                        //verify the channel

                                    }
                                } else {
                                    isChannel = false;
                                    numberComplet = 1;
                                }
                            }
                        }
                    }
                    repaint();
                } catch (IOException ex) {
                    Logger.getLogger(MainPortSerial.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

    }

    public boolean isDigit(String value) {
        if (value.equals("0") || value.equals("1") || value.equals("2") || value.equals("3") || value.equals("4") || value.equals("5") || value.equals("6") || value.equals("7") || value.equals("8") || value.equals("9")) {
            return true;
        } else {
            return false;
        }

    }

    private float HexadecimalToVolts(int value) {
        float volts = 0;
        float bit = ((float) 5 / (float) 255);
        volts = bit * value;
        return volts;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton btnChannelFour;
    private javax.swing.JRadioButton btnChannelOne;
    private javax.swing.JRadioButton btnChannelThree;
    private javax.swing.JRadioButton btnChannelTwo;
    private javax.swing.JButton btnConnectPort;
    private javax.swing.JButton btnGraphicHistory;
    private javax.swing.JRadioButton btnHistoryLineal;
    private javax.swing.JRadioButton btnHistoryPolar;
    private javax.swing.JRadioButton btnOffChannelFour;
    private javax.swing.JRadioButton btnOffChannelOne;
    private javax.swing.JRadioButton btnOffChannelThree;
    private javax.swing.JRadioButton btnOffChannelTwo;
    private javax.swing.JRadioButton btnRadioLineal;
    private javax.swing.JRadioButton btnRadioPolar;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField fechaFin;
    private javax.swing.JTextField fechaIni;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPanel panelPolar;
    // End of variables declaration//GEN-END:variables
}
